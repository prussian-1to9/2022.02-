# day08

배열의 복사
	1. 얕은 복사
		주소만 복사하는 방법
			int [] a=new int[5];
			...
			int [] b;
			b=a;	==> 얕은
		특징 : 데이터는 공유하기에, 한 곳에서 수정하면 다른 곳에서도 바뀜.
		※ 얕은 복사의 경우, 
	
	2. 깊은 복사
		데이터를 복사하는 방법
		얕은복사와 달리 데이터를 독립적으로 사용할 수 있따.
			
			System.arraycopy(#1, #2, #3, #4, #5)
				#1 : 원본 배열의 주소
				#2 : 원본 배열의 복사를 시작할 index
				#3 : 복사받을 배열의 주소
				#4 : 복사받을 배열의 붙여넣기를 시작할 index
				#5 : 복사받을 데이터의 개수
				
-------------------------------------------------------------------------------------------
배열의 단점
	1. 한 번 배열의 크기를 정하면 크기 조절이 불가능하다.
	2. 같은 형태의 데이터만 관리할 수 있다.
	
-------------------------------------------------------------------------------------------
String 배열
	String[] str;	// 배열변수 선언
	str=new String[5]; -> 기본데이터 타입이 아니기 떄문에 자동초기화가 안됨.
	
	그래서 데이터 공간까지 만들어주거나
	str[0]="1", str[1]="2";
	초기화를 해 주어야
	String[] str={"1" , "2" , ....};	에러가 안남!
	
	+ 문자열도 필요에 따라 char[] 형태로 변환 해 사용 할 수 있다.
		문자열.toCharArray();
		
-------------------------------------------------------------------------------------------
String 클래스에서 자주 사용되는 함수
	1. charAt(index)
	2. .length()
	3. substring() : 문자열 중에서 원하는 문자열만 따로 뽑아 반환해 준다.
		형식은 두가지.
			1. substring(index);
				종료위치의 표기가 없을 경우, 문자열의 끝까지 추출한다.
			2. substring(index, length);
				※ 종료위치 직전까지의 문자까지 추출한다.
	4. .equals()
	
-------------------------------------------------------------------------------------------
2차원 배열(배열의 아파트단지 만들기!!)
	1차원 배열을 관리하는 배열.
	배열 안에 다시 배열이 들어있는 형태.
	(정확힌 배열 안에 1차원 배열의 주소가 기억된다.)
	
	방법
		1. 배열 주소를 기억할 변수 만들기
		   : Heap영역에 있는 데이터는 주소를 알아야 사용할 수 있기 때문
		   
		   방법
		   		데이터타입[][] 변수이름;
		   	※ [] 개수는 n차원을 뜻함.
		   	
		   ex.
		   		int[][] num;
		   		num=new int[5];	==> Heap type이 달라서 안됨!
		   		
		 2. 1차원 배열 몇 개를 관리할지 정하고
		 	1차원 배열의 추소를 기억할 메모리를 만든다.
		 		new 데이터타입[개수][];
		 
		 3. 실제 정수를 관리하는 1차원 배열의 길이를 정하고
		 	1차원 배열의 주소를 기억할 메모리를 만든다.
		 		new 데이터타입[개수];
		 		
		 		ex.
		 			num[0]=new int[3];	-> 첫번째 칸에 배열이 들어갔음!
		 			
-------------------------------------------------------------------------------------------
+ 2차원 배열도 사각형 형태 (표형태)의 배열을 만들 수 있다.
	데이터타입 [][] 변수=new 데이터타입[행][열];
	
	ex.
		int[][] num=new int[5][3];
		==> 정수 3개를 관리하는 배열 5개를 관리하는 배열
		
		※ 이해를 돕기 위해 사각형으로 서술하였으나,
		  실제로는 별도의 메모리 공간을 차지하는 배열이 만들어지고
		  그 배열을 관리하는 배열이 다시 만들어진다.
	
	+ 2차원 배열도 초기화 가능! ~※[Test10]
	
		int[] num={데이터1, 데이터2 ...};
		int[][] num={{1,2}, {3,4,5}, {6,7,8,9}, ...};