# day17

--------------------------------------------------------------------
java 공부법~
	java 프로그램을 사용하는 방법
		-클래스를 사용
		==> 해당 클래스를 new 시켜서, Heap에 올려놓고
			필요한 것을 꺼내서 사용한돠.
			
			new 시키면, Heap에 만들어진 instance의 주소를 알려줄거고
			이것을 변수에 기억시켜, 변수에 접근하는 방법으로 사용.

이후의 자바 공부법 : 다작이 답이다!
	0. 만들고싶은 프로그램 만들어보기!
	1. 클래스 많이 만들기
	2. 함수 많이 만들기
	3. 만든 클래스를 가져와 사용하기
	
--------------------------------------------------------------------
Stream
==> java는 외부 장치와 데이터를 주고 받는 방법을 통일시켜 놓았다.

	빨대로 생각해보면 이해가 쉽다!
	Stream을 외부 장치에 꽂기만 하면 (같은 함수를 이용하면)
	외부 파일이 java에 들어옴!
	
***	+ Stream은 방향성을 갖는다! : 단방향
	  Upload/Download를 동시에 할 수 없다.
	  필요한 개수만큼 Stream을 만들어주어야 해용.
	
	  
	종류(구분법 : 방향성)
		1. 		->Data->프로그램
			InputStream, Reader
			
		2. 프로그램->Data->
			OutputStream, Writer
			
	종류(구분법 : 데이터 양)
		1. byte 단위
			InputStream, OutputStream
			==> 상대적으로 처리속도가 느리지만, 기계어도 처리가능
			
		2. char 단위
			Reader, Writer
			==> 상대적으로 처리속도가 빠르지만, 문자처리만 가능
			
	종류(구분법 : 상대방 종류)
		1. Target Stream(기본 스트림)
			==> 외부장치에 직접 연결
			
		2. Filter Stream(보조 스트림)
			==> 스트림의 속도향상 or 개발자의 편의를 위해
				스트림에 연결.
			  ※	Target Stream없이 사용할 수 없다.

--------------------------------------------------------------------			  
byte 단위 스트림 (끝까지 다 byte계열임!!)

	1. InputStream
		
		int read()
		- 한 문자(1byte)만 읽어들이는 함수.
		
		int read(byte[] b)
		- 여러 byte를 읽어들임. 결과는 배열에 기억되며
		  반환값=읽은 데이터의 byte 수
		  
		int read(byte[] b, int off, int len)
		- 여러 byte를 읽어들임. but 지정 위치부터 지정개수만큼 읽음
		  off : 읽을 시작 위치
		  len : 데이터 개수
		  반환값=읽은 데이터의 byte 수
		  
		  
	2. FileInputStream
	==> 파일에 연결되는 입력용 스트림
	
		FileInputStream(String name)
		==> name : 연결할 파일의 이름.
		
		
	3. FileOutputStream : 주요함수가 모두 void
	==> 파일로 연결되는 출력용 스트림
	
		void write(int b)
		==> 한 글자(1byte)만 내보냄
		
		void write(byte[] b)
		==> 여러 문자를 내보냄
		
		void write(byte[] b, int off, int len)
		==> 여러 글자 중, 지정한 부분만 내보냄
			off : 내보낼 시작 위치
			len : 데이터 개수
			
--------------------------------------------------------------------
class 'File'
==> Stream과 다르다. 외부장치 중, 가장 많이 쓰는게 File이라
	File에 대한 정보를 처리하기 위한 클래스이다.
	
	Constructor
		File(String pathname)
		==> 파일의 경로와 이름을 지정해 만듦.
		
		
		File(String parent, String child)
		==> 파일의 경로와 이름을 따로 지정해 만듦.
		
		File(File parent, String child)
		==> 파일의 정보를 이용하고, 이름만 다시 지정해 만듦.
		
		File(URI uri)
		==> 네트워크에서 다른 시스템에 있는 파일의 정보를 만듦.
		
	+ java에서 File은, 폴더 자체도 파일로 처리한다.
	
	주요 함수
		1. 정보를 알아내는 함수
			getName()	: 파일 이름만 알아내는 함수
			getParent()	: 폴더 이름만 알아내는 함수
			exist()		: 파일의 존재 여부를 알려주는 함수
			length()	: 파일의 크기를 알려주는 함수
			
		2. 외부적인 작업을 하기 위한 함수
			-> 데이터 입출력 외의,
				파일 전체에 대해 필요한 작업이 가능
		
			delete()	: 파일 삭제
			mkdir()		: 폴더 생성 (하나만 생성 가능)
			mkdirs()	: 폴더들 생성 (계층화 가능)
					ex. a/b/c/d ==> 없는 폴더도 만들어줌.
			renameTo()	: 파일 이름 변경
			list()		: 폴더에 있는 파일 목록을 구하는 함수
			
		+ 비슷한 함수들
			String[] list 		: 이름만 알아냄
			Filed[] lisFiles()	: 정보까지 알아냄
			==> 일반적으로 파일 목록 찾을때 많이 씀.
			
			String[] list(FilenameFilter filter)
			File[] listFiles(FileFilter filter)
			File[] listFiles(FilenameFilter filter)
			==> 필터링해서 리스트를 구할 수 있는 함수
				원하는 파일만 골라서 목록을 구할 수 있다!
				
--------------------------------------------------------------------
Filter Stream : Target Stream은 존재 해야함!
	1. 기본 Stream에 기능을 추가
	2. 사용자의 편의를 제공함
	
	+ Stream이 갖는 '방향성'은 Filter Stream도 예외는 아니다.
	  같은 방향끼리 연결해야 함!
	
	1. BufferedInputStream / BufferedOutputStream
	==> 편의기능은 X.
		Stream의 성능을 향상시키는 역할을 함.
		buffer memory에 데이터를 모았다 한번에 처리하는 기능.
		
		주요 함수
			flush()		: 강제로 buffer memory를 비워
						  값을 꺼내는 함수
						  
	2. DataInputStream / DataOutputStream
	==> 자주 안씀. 기능 향상은 X.
		보통 스트림은 반드시 byte[]로만 처리를 하는디
		문자 데이터가 아니면 데이터에 문제가 생길 수 있음.
		
		--> byte[]로 변환하지 않고 직접 외부장치로 입/출력
		
		편해보이는데 왜 자주 안씀?
		-> DataOutputStream으로 데이터를 내보낸 경우,
		   DataInputStream으로밖에 못받음!
		   그리고 꺼낼 때 순서가 지켜져야 함.
		   (저장할 때 int, float이고 꺼낼 때 float int NG!)
		   
	3. PrintStream
	==> 사용자의 편의성 + 기능향상을 위해 만들어진 보조 스트림.
	
	기능
		1. 내부적으로 Buffered 와 연결해 놓았다.
		2. 사용자 편의를 위해, java의 데이터 형태를 그대로 출력함.
		3. 파일과 직접 연결하도록 해놓았다.
			(내부적으로 TargetStream을 만들어, 장치와 연결된다.)
			
	단점 : only Output 다케다.
	
*byte 단위 스트림 끝

--------------------------------------------------------------------
char 단위 스트림
==> 한 번 입출력시 2byte 단위로 입출력 가능.

  ※	기계어 호환이 불가능. (텍스트만 가능)
  	2byte가 1char가 될 때, 순서가 뒤집어진다.
  	ex.
  		가 => ㄱ:0011 + ㅏ:0101		이라고 하면
  		00110101로 쓰면 될거라 생각 하겠지만
  		01010011로 뒤집혀버림!
  		
  	1. FileReader / FileWriter
  	==> 파일에 직접 연결된 Target Stream
  		단위는 char.
  		
  		내부적으로 char 단위로 처리한다는 것의 차이고,
  		처리 방식은 똑같다!
  		
  	2. 관련된 Filter Stream
  		
  		1. BufferedReader / BufferedWriter
  		==> 작동방식은 똑같다.
  		
  		  +	가장 핵심적인 함수
  			char의 기본 함수는 문자열을 못읽음.
  				
  				readLine()==> 한 줄 단위로 String을 읽어 사용가능
  				
  			줄 단위로 읽기 때문에, 필요하면 강제로 \n해줘야 함.
  	
  		2. PrintWriter
  		==> 마찬가지로 작동방식은 같다.
  		
  				1. Buffered 기능을 갖고 있다.
  				2. 직접 파일에 연결할 수 있다.
  				3. 사용자 편의를 제공한다 : java의 데이터 형을 이용
  				
  	  ※	Stream을 연결할때!
  		byte기반은 byte기반끼리, char기반은 char기반끼리만 연결 가능
  		
  		  +	InputStreamReader / OutputStreamWriter
  		  	==> 크기가 다른 두 개의 Stream을 연결할 때 사용
  		  		반드시 Target Stream이 byte기반, Filter Stream이 char 기반이여야 함.
  		  		
 * char 기반 Stream 끗.
 
 --------------------------------------------------------------------
 객체의 직렬화
 ==> 데이터는 기본형 외에도
 	클래스 전체를 데이터로 상대방(외부장치)와 입출력이 가능하다.
 	--> 이 때, Method는 제외되고, 변수의 내용만 입출력이 된다.
 	
 	이 처럼 class가 다른 장치에 전달되는 상태를 '직렬화'라 표현함.
 	
 	왜 직렬화라 카는데?
 	--> class에 있는 변수의 내용이 순서대로 입출력된다는 의미.

 	  +	모든 클래스가 입출력되진 않음.
 	  	그 클래스가 직렬화 가능한 클래스여야 함.
 	  	--> Serializable 인터페이스를 구현한 클래스!
 	  	
	직렬화는 변수의 내용'만' 입출력 된다.
	따라서, 네트워크처럼 서로 떨어져 있는 경우엔
	양쪽에 같은 (구조의) 클래스가 존재해야 한다.
	
	이 때, 양쪽에 있는 클래스는
		클래스 이름+패키지 이름		모두 같아야 한다!
	(아예 .java파일을 열었을때 내용이 동일해야 되는거임)
	
	요럴 때 쓰는게 이 친구다.
  <	ObjectInputStream / ObjectOutputStream >
  	==> 주로 네트워크에서 많이 쓰기에, byte기반만 존재.
  	
--------------------------------------------------------------------
IO 쪽에서 해야할 공부~!
==> 필요한 데이터를 파일에 저장할 수 있고,
	저장된 내용을 불러와서 사용할 수 있음 OK~