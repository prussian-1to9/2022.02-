# day16

Map
==> 하나의 데이터를, 그 데이터를 구분할 수 있는 key값과 한쌍으로 만들어
	데이터를 기억하는 Collection중 하나.
	그리고, 사용할 경우엔 Key값을 이용하여 데이터를 꺼낼 수 있게 하는것.
	
	많은 양의 데이터보단 key값을 이용한 유동적인 데이터 이용에 주 목적을 둠.
	
HashMap (신) / HasTable (구)
	HashMap 사용이 권장된다.
	해쉬코드를 이용한 정렬이 이루어진다.
	
	주요함수~
		put(Object key, Object value)
		==> Setter와 유사.
		get(Object key)
		==> Getter와 유사.
		
		values()
		==> 데이터들만 꺼내는 함수.
		keys(), ketSet()
		==> key값들만 꺼내는 함수.
		
		+ 반환값 타입을 확인합시다!
		  keys()의 반환값은 Enumeration임. (Iterator의 구버전)
		  ==> 데이터를 순차적으로 꺼낼 수 있음!
		  
		  keySet()은 HashMap의 함수. 얘는 Set임!
		  
		+ entrySet()
		  Map은 key값을 알아야 꺼내는게 원칙인디 얘를 이용하면 아니다!
		  key값과 데이터를 Set으로 묶어준다 이거여.
		  
		  근데 야를 왜 안쓴다냐.
		  Map은 항상 데이터+key값 pair를 이루는디 Set은 아니지라.
		  요 둘을 하나로 묶어줘야 Set으로 저장된다 이거여.
		  	그럼 야를 우째 해결한다냐?
		  	==> VO (Value Object) 클래스 이용 : Map.Entry
		  야가 복잡허지. 그래서 안쓴다 이거여.
		  
TreeMap
==> TreeSet과 유사. 다만 정렬기준이 key값이다.		
	그래서 key값이 정렬이 되지 않는 클래스는 사용불가.
	정렬방식을 정해서 사용해야함.
	
	+ 클래스 중 가끔, 데이터를 하나로 묶기 위한 목적인게 있음.
	  class Tmp{
	  	String name;
	  	int age;
	  }
	  이런 클래스를 우리는 Bean class라고 함.
	  Value.Object(VO)라고도 함.
	  
	  또는 이런 클래스들은 데이터 전달 목적으로 사용되어
	  DTO(Data Transfer Object)클래스라고도 함.
	  
	+ Collection의 중첩이 가능하다.
	
----------------------------------------------------------------------
Properties
==> Map의 역할을 하는 클래스

	일반 Map과의 차이점은 파일(외부장치)를 이용해
	직접 데이터를 읽어서 Map처럼 저장 할 수 있고
	Map에 저장된 데이터를 직접 파일(외부장치)로 출력해 저장도 가능.
	
	※ 파일의 내용을 읽을 때 인코딩이 안됨!
	->한글 파일의 경우, 파일 자체에서 인코딩 해줘야 함.
	->방법!
		0. txt 파일 찾아 ansi타입으로 인코딩~
		1. cmd창을 열고~
		2. Path에 JAVA_HOME이 등록되어 있는지 확인~
		3. native2ascii 명령을 사용해 인코딩~
			형식 : native2ascii	ansi타입파일 새로운파일
			ex.
				native2ascii d:\sample.txt d:\sample_ko.txt
				
	+ Properties는 String만 처리 가능하다!
	  
----------------------------------------------------------------------
Generic(s)
==> 컬렉션은 모든 형태의 데이터를 다 입력 받을 수 있다.
	but 실무에선 한 가지 형태로 입력받는 것을 원칙으로 함.
	그런데 꺼낼땐 강제 형변환을 해줘야 함.
	
	그래서 이게 뭔디
	==> Collection에 입력되는 데이터 타입을 미리 알려주어,
		꺼낼때 강제형변환 하지 않아도 쓸 수 있게 하는것.
		
	형식
		ArrayList<String> List=new ArrayList<String>();
		==> List에 입력되는 데이터 타입은 String이다.
		
	※ Generics는 전파되지 않는다.
	->하나의 컬렉션이 Generic선언되어도,
	  이 컬렉션을 이용하는 다른 컬렉션에 적용되진 X
	  
	+ 특수한 Generic
	  원래 Generic은 특정 클래스만 입력받을 목적으로 사용된다.
	  
		<? super 클래스이름>
		==> 지정한 클래스 포함 상위 클래스까지 허락
		<? extends 클래스이름>
		==> 지정한 클래스 포함 하위 클래스까지 허락
	  
	  요거가 Generic선언 안한거랑 동일한 효과가 있음
	  (강제형변환 해줘야되는건 똑같응께)
	
----------------------------------------------------------------------  
어노테이션 : annotation
==> 내부적으로 약속된 실행을 자동적으로 처리하도록 하는 명령의 일종

	주로
		화면에 실제 보이는 실행이 아니고,
		점검을 하든지, 선언적 실행(@Override) 의 의미를 가진 명령
		
	형식 : @Override