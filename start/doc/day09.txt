# day09
기본문법

함수(Method, Function)
	한 가지 작업을 실행하기 위해 만들어진
	가장 작은 단위의 프로그램. 기능의 최소 단위.
	
	* 프로그램이란?
		함수들이 모여 원하는 목적을 이루도록 구성하는 것.
		
	****
	+ 함수 작동 방식
		1. 함수는 누군가 호출해야만 실행된다.
			함수 스스로가 실행되는 경우는 없다.
			
		2. 함수는 실행이 완료되면 자신을 호출한 곳으로 실행 순서를 넘긴다.
		
함수 만드는 법~

	접근지정자 [속성] 반환값타입 함수이름(매개변수리스트...) {
		함수 내용
	}
	
	1. 속성
		final, static 등등
		
	2. 접근지정자
		해당 개체에 접근할 수 있는 권한을 지정해 놓은 것.
		클래스에서 세부 설명
		
	3. 함수이름
		개발자가 지정하는 사용자 정의어
		
	4. 매개 변수 리스트
		변수 선언 형태로 만드는 것. 개수랑은 상관X
		
	5. 반환값 타입
		결과가 존재하는 경우 : 타입만 적어준다.
		결과가 존재하지 않는 경우 : 반드시 void를 기입한다.
		※ 반환 값이 2개 이상인 함수는 만들 수 없다!
		
결론!!
	함수는 4가지 형태를 벗어날 수 없다!
	
	1. void abc(){}
	2. int abc(){}
	3. void abc(int num){}
	4. int abc(int num){}
	
---------------------------------------------------------------
* return명령
	함수 안에서 사용할 수 있는 명령!
	
	의미
		1. 힘수실행을 종료하시오.
			return;
		2. 결과가 있으면 결과를 내보내고 함수를 종료하시오.	
			return 데이터;
		※ void형태의 함수는 사용 할 수 없다.
		
---------------------------------------------------------------
함수 사용방법

	함수이름(데이터, ...);
	
	*데이터란?
		함수는 그 함수가 실행되기 위해 필요한 데이터(매개변수)를 받을 준비를 하고 있다.
		-> 결론적으로 데이터란(parameter란)
			함수가 준비하고 있는 매개변수 리스트에 기억할 데이터를 제공하는 것.
		
		※ 데이터는 그 함수가 준비하고 있는 매개변수의 개수, 형태, 순서가 일치해야 함.

---------------------------------------------------------------
객체지향언어(OOP : Object Oriented Programing)
	클래스를 이용해서 프로그램을 만들어 나가는 언어
	
클래스란?
	하나의 목적을 달성하기 위해서 필요한 기능들을 모아놓은
	프로그램의 기본 단위
	
	ex.
		문자열 관리 : String
		네트워크 처리 : Soket
		
	-> 클래스의 구성요소는
		1. 변수(Field)	: 필요한 데이터를 보관하고 있어야 함.
		2. 함수(Method)	: 뭔가를 해결하기 위한 기능이 있어야 함.
		
	얘네를 맴버(Member)라고 합니데이~
	
클래스 작성 방법
	접근지정자 [속성] class 클래스이름 {}
	클래스는 메모리에 올려져야 실행 된다.

	Object=Reference+Instance
	객체  =변수		+인스턴스
	
결론
	객체지향언어는 클래스로 기반으로 만들어진
	Object(객체)에 의해 만들어지는 프로그램.
	
---------------------------------------------------------------
객체(Object) 만들기~
	객체는 JVM이 만들어준다.
	
	클래스이름 변수;
	변수=new 클래스이름;
	
	ex. public class Test어쩌구
	
	Test t;	// 레퍼런스 변수가 됨. Heap type : Test
	t=new Test();	// new명령을 통해 클래스가 Object 됨.
	컴퓨터가 물건을 만든다는 개념=메모리에 클래스가 만들어짐
	※ 클래스당 Object는 여러개여도 상관 없다.
	
	Heap에 만들어진 클래스를 Instance,
	만들어진 Instance의 주소를 기억할 변수를 Reference.
	라고 한다.
	이 두가지를 통칭해 Object(객체)라고 한다.
	
---------------------------------------------------------------
객체 사용방법
	객체를 사용한다는 건
	그 목적을 달성하기 위해 필요한 데이터/메소드 를 활용하는 것!
	
	주소.변수
	주소.함수(데이터)
	
	Test클래스의 a변수에 10을 기억시킨다면
		Test t=new Test();
		t.a=10;
		
		
---------------------------------------------------------------
* 지역변수
	해당 지역에서만 사용할 수 있는 변수.
	그 문장이 실행되는 순간 변수가 만들어지고
	그 블럭을 벗어나면 변수는 사라진다.
	ex. for안의 지역변수 등등
	
* 전(全)역 변수
	모든 지역에서 사용할 수 있는 변수.
	Heap에 만들어진 데이터들을 이야기한다.
		탄생시점 : new시키는 순간
		소멸시점 : 프로그램이 종료되는 순간
		
---------------------------------------------------------------
객체의 배열
	하나의 클래스를 가지고 여러개의 Object를 만들 수 있으므로
	이때 만들어지는 Object을 배열로 만들어 관리할 수 있다.
	
	생성 방법)
		Test[] t;
		=> Test 인스턴스들을 배열로 관리할 주소 변수를 만든다.
		
		t=new Test[개수];
		=> 관리할 크기를 정해 배열을 만든다.
			실질적인 Object는 만들지 못한 상태.
			(기본타입이 아니라 자동 초기화가 되지 않았기 때문)
			
		ex.
		class Test{
			int a;
		}
		
		Test[] t=new Test[5];
		for (int i=0; i<t.length; i++{
			t[i]=new Test();
		}		로 데이터를 지정해 주어야 한다.
		
	사용 방법)
	
		배열변수[index].변수이름=?;
		배열변수[index].함수이름();
		
		배열변수[index]안에 있는 주소는 오브젝트 참조 주소라서
		.을 이용해 접근한다.(소속을 밝혀준다)
		
---------------------------------------------------------------
함수의 Overloading (함수의 중첩)
	함수의 이름을 중첩해 만든다는 의미.
	같은 클래스 안에 동명의 함수를 만드는 행위.
	
	조건
		0. 같은 클래스 안에 오버로딩 할 함수가 있을 것.
		1. 함수의 이름이 같을 것.
		2. 매개변수의 형태, 순서, 개수중 하나이상이 다를 것.
			(반환값(속성)과는 상관이 없다.)
			
	결론
		함수를 호출할 때 정확한 함수를 입력해야한다.
		(원래의 함수 오버로딩 규칙)
		
	사용법
		원하는 기능을 하는 함수가 요구하는 데이터를
		형태와 순서에 맞춰 입력해주면 됨!