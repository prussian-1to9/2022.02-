# day06

* 블럭킹 함수 (Blocking Method)
	특정 상황이 될 때까지 해당 함수에서 실행을 멈추고 기다리는 함수.
	
for 명령 참고사항
	선 조건처리 명령이다.
	for(;;)처럼, 안의 내용을 기술하지 않아도 무방함. (true처리 됨)
	
while 명령 참고사항
	마찬가지로, 선 조건처리 명령이다.
	for 명령과 달리, 카운터 변수 선언부분이 없다.
	-> 실행횟수 제어 시
		명령 시작 전에 카운터 변수 선언 및 초기화를 해준 다음
		{명령} 내부에서 증감식으로 증감 해 횟수를 제어해야 한다.
	
do~while
	후 조건처리 명령이다.
	조건문이 false여도 적어도 한번 내용을 실행한다.
	
* 지역변수vs전역변수
	지역변수 : 해당 블럭 내에서만 사용할 수 있는 변수
	전역변수 : 전(全)역 변수. 클래스 내에 어디서든 사용 가능한 변수.
	
-------------------------------------------------------------------------

* flag 기법
	프로그램을 실행하다 보면, 두 가지 이상의 경우가 발생하는 때가 있다.
	그 후에 어떤 경우가 발생했는지 알아보는 방법
	
	ex.
		for (;;){
			실행문1;
			if(조건){
				break;
			}
			실행문2;
		}
		(1)
		
	일 경우, 실행문 1,2가 마지막 회차 때 실행되었는지 알기 힘들다.
		(1) 부분을 실행할 때, 위의 반복문이 정상 실행되었는지
		혹은 break로 종료가 되었는지 알아내는 기법
		
		Way)
			시작하기 전, 변수에 특정 데이터를 기억시켜놓고
			특정 순간이 발생하면 변수의 데이터를 변경시킨다.
			
			(1) 부분을 실행할 때 그 변수의 데이터를 살펴보면
			위의 반복문이 정상적으로 모두 처리되었는지
			중간에 강제종료 되었는지를 확인할 수 있게 된다.

-------------------------------------------------------------------------

레이블이 붙은 반복문 ~※[Lable]

	How to use )
		레이블이름:
			for(;;){
				for(;;){
					실행문;
					if(조건){
					break 또는 continue 레이블이름;
					}
				}
			}
	※ 레이블을 사용한 제어는 반드시 소속된 반복문에 한해 적용 가능하다.

-------------------------------------------------------------------------
* continue;
	반복문에서만 쓰일 수 있다.
	이 후 내용은 실행하지 않고 반복문의 처음으로 돌아가는 명령어.
	- continue 역시 레이블 제어가 가능하다.
	
	※ 반복 명령문에 따라 위치가 달라진다.
		for (;;){
			if (){
				continue;
			}
		}
	for 반복문의 경우 조건문의 증감식으로 돌아간다.
	
	while(){
		if(){
			continue;
		}
	}
	while 반복문의 경우 조건식으로 돌아간다.
	
	do{
		(1)
		continue;
		(2)	
	}while (조건식);
	(4)
	예시의 do~while의 경우
		(1)-(조건식 : true)-(1)
					: false)-(4)
	
	
	
	
	
	
	
	
	
	
	