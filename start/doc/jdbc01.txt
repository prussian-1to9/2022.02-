# jdbc01

JDBC가 뭔디요?
==> Java를 이용해 DB를 Control 할 수 있는 외부 api.

	DB는 그 DB가 가진 DBMS에 의해 성능이 결정된다.
	(DB마다 질의명령을 처리하는 방법이 다르니까.)
	
	개발자 입장에서 보자면, DBMS에 따라서
	프로그램 방식또한 달라져야 한다는 말이 된다.
		
	불편하쥬? 그래서 java 안에 DBMS를 만들고,
	자바 속 DBMS가 실제 DB와 연결되어 처리하게 했다.
	(이제 하나로 통일됐어~~ 이것만 익히면 돼~~~)
	
  +	JDBC와 실제 DBMS를 연결하는 프로그램은?
  	해당 DB를 만든 회사가 제공한다.
  	
*****
java에서 개발자가 가장 먼저 해야할 일?
	1. 사용하려는 DB와 JDBC를 연결하는 프로그램을 찾는다
		-> a.k.a. 'JDBC Driver'
		
	2. 찾아낸 외부 api를 이클립스에 등록,
		이클립스에서 사용가능하게 만든다.
		
		외부 api 등록 방법
		1) project 선택
		2) 우클릭 -> properties -> 속성 창 'Java Build Path'
		3) Libraries -> Add External JARs -> 다운받은 jar파일 선택
		
		  +	왜 인터페이스로 만들었을까?
		  	각 DBMS마다 세션을 관리하는 방법이 다르기에,
		  	접속하는 순간 그 DBMS에 맞도록 함수의 기능을 조절하기 위해.
		  	
------------------------------------------------------------------------
JDBC 프로그램 작성 순서 summary

	0. JDBC 드라이버 준비 (다운받든... 뭘 하든...)
		+ 이클립스 프로젝트에 jar파일 올리기
	
	1. 드라이버 로딩
	
		Class.forname("경로");
		
	2. DB에 접속
		
		Connection con = DriverManager.getConnection(String url, String id, String pw);
	
		
	* * * 이 위로는 DB마다 사용법이 다를 수 있다. * * *
	
	
	3. JDBC와 실제 DBMS 사이에 명령을 전달할 수 있는 도구를 만든다!
		(oracle은 서버 DB라, 프로그램이 작동하는 컴퓨터와 DB가 있는 컴퓨터가 상이할 수 있음)
		
		Statement stmt = con.createStatement();
		
	  +	질의명령을 실행하는 방법 (= Statement에 질의명령을 실어 보내는 방법)
	  
	  		1) execute(String sql)	: 질의명령을 실행 후, jdbc에게 보고하지 않음.
	  			==> 반환값 : boolean
	  				실행 성공/실패 여부가 아닌, DB가 jdbc에게 명령을 받았는지 여부다.
	  				(명령을 받기만 하고, 에러가 나도 true가 나온다.)
	  				
	  *****	2) executeQuery(String sql)
	  			==> 반환값 : ResultSet
	  				질의명령의 결과로 탄생하는 inline table을 관리하는 클래스로,
	  				SELECT 질의명령에만 사용할 수 있다.
	  				
	  		3) executeUpdate(String sql)
	  		==> 반환값 : int
	  			질의 명령 실행 결과, 수정/삭제된 row의 개수를 의미한다.
	  			주로 질의명령 실행 여부를 판단할 경우 사용한다.
	  			(UPDATE, DELETE, INSERT 등 . . .)