# day14

오버라이드 규칙~
	1. 함수의 원형을 유지한다.
	2. 접근지정자는 같거나 넓은 방향으로.
	3. 예외처리는 같거나 좁은 방향.
		-> 예외를 전이하는 함수일 경우,
			throws하는 예외는 개수가 같거나 줄어들 수 있다.
		-> super class에서 던지지 않은 예외를 던지면 X.
		
		ex.
			void add(int a, int b) throws InvalidNumberException,
				NotANumberException {}
			얘를 오버라이드 해서
			
			@Override
			void add(int a, int b) throws InvalidNumberException,
				NotANumberException {}	==> 가능쓰
				
			@Override
			void add(int a, int b) throws InvalidNumberException {}
			==> 가능쓰! (줄어든건 ㄱㅊ)
			
			@Override
			void add(int a, int b) throws Exception {}
			==> NG! (예외의 범위가 더 넓어졌삼~~!)
			
			@Override
			void add(int a, int b) throws NumberException {}
			==> (NumberException은 위의 예외와 형제 예외로 침)
				NG! 상위 클래스의 함수에서 던지지 않은 예외라 안됨!
				
-------------------------------------------------------------------
Object class
==> 자바로 만든 클래스의 최상위 클래스 역할을 하는 클래스.
	자바에서 상속관계를 명확하게 하기 위한 역할을 주로 한다.

	1. equals()
	==> 비교함수.
		Object 클래스가 갖는 이 함수는
		내용이 아닌 주소를 비교한다.

	+ 우리가 만드는 클래스를 사용하는 법.
		1. 객체를 만들어야 함 (Heap영역에 내용 올려놓기)
		2. 변수(주소)를 이용하여 내부의 맴버들을 사용한다.

	+ 우리가 String class의 equals()를 내용 비교 함수로 알고 있다!
		요것은. String class가 Object class에서 Override할 때
		내용 비교 함수로 바꿨기 때문이다~~!

	+ 우리가 만드는 클래스도 내용 비교를 원한다면
		이 함수를 override하면 될것임~



	2. toString()
	==> 자바는 주소를 내부적으로 사용하고 있다!
		주소를 개발자에게 노출시키진 않는다.

		대신, 주소(변수가 기억하고 있는)를 출력하면
			"클래스이름@해쉬코드값"
		의 형태로 출력하게 된다.
		
		+ 해쉬코드값?
		==> 자바는 주소를 내부적으로 해쉬테이블을 이용하여 관리함.
			해쉬코드값은 해쉬테이블의 코드값임. (엑셀 표 처럼)

			문제는, 주소를 출력하려고 하면 내용이 출력되는게 아니라
			해쉬코드 형태의 코드값이 출력된다는 거여.
			
			만약 우리가 만든 클래스에서 주소(변수)를 출력할 때
			해쉬코드값이 아닌, 데이터를 출력하게 하려면
			toString()함수를 Override하여
			원하는 형태의 문자열을 반환해주도록 만들어주면 되는것이여.



	3. clone()
	==> 자기 자신을 깊은 복사 해주는 함수
	
		이 함수는 protected 함수이다.
		상속받은 클래스or같은 패키지 안에 있는 클래스에서만 사용 가능.
		
	4. hashCode()
	==> 해쉬테이블에 주소를 관리하는 코드값을 알려주는 함수.
		
-------------------------------------------------------------------
String class
	문자열을 관리하는 클래스
	02-905-7559
	*****
	주의사항!! ~String class의 가장 큰 단점~
		String class는 내용이 변경되면
		변경된 내용을 다시 메모리에 저장하고
		주소를 바꿔치기 합니데이!
		
		따라서 String 내용 변화가 심하면, 메모리 소모가 증가한다.
		
	결론적으로 변화가 심한 문자열은 String 클래스를 사용하면 불리하다.
	이럴 때 사용 가능한 클래스는
		StringBuffer
		StringBuild

	+ 그래도, 간단한 문자열 처리는 자주 사용하는 클래스이므로
		클래스 중 유일하게 new 시키지 않고 사용할 수 있도록 준비해놓은 클래스이다.
		
		ex.
			String str=new String("황인준");	도 가능하지만
			String name="황인준";				도 가능하단 얘기!
			
	+ String class는 유일하게 함수 없이
		연산자 +를 사용하여 결합연산을 처리할 수 있다.
		
	그래서 어쩌라고?
	==> 변화가 심한 문자열 데이터는 String타입보단
		StringBuffer를 사용하는 것이 적합하다구.
		
	+ String 소속의 함수는 자신이 기억한 데이터 '자체'를 변경할 수 있는 함수가 없다.
		다만 연산된 결과를 반환해주는 형태의 함수들만 존재한다.

-------------------------------------------------------------------
StringBuffer
	String과 동일하게 문자열을 관리하는 클래스!
	
	*****
	String과의 차이점?
		String은 내용의 변화가 있을 시, 새로운 메모리에 공간을 확보해 사용하는디,
		야는 그렇지가 않다. 이 단점을 보완하려고 만든 클래스여.
		
		내용에 변화가 생기면 현재 메모리에 바뀐 내용을 기대로 기억한다 이거여.
		
	사용법~
		1. 객체 만들기
			StringBuffer buff=new StringBuffer(문자열);
			
		2. 만들어진 객체에 문자열 결합
			buff.append(문자열);
			
		3. 문자열 데이터가 필요한 순간에 문자열로 변환!
			String str=buff.toString();

-------------------------------------------------------------------
StringTokenizer
	문자열을 특정 구분자를 기준으로 자르는 작업을 할 때 사용하는 클래스
	
	주의!! ~분리된 결과들은 배열과 같은 형태로 buffer메모리에 기억됨~
		이 때, 기억된 내용을 접근해서 사용하게 되면
		그 내용은 메모리에서 사라진다!!
		
	사용법~
		1.
			StringTokenizer=new StringTokenizer(문자열, 구분문자);
			
			while (token.hasMoreElement()){
				하나씩 꺼내서 작업!
				
				Object o=token.nextElement();
				String str=token.nexToken();
			}
			+ nextElement를 쓰되 String으로 받고싶으면?
				String str=(String)token.nextElement();
-------------------------------------------------------------------
Math class
	주로 수학적인 기능을 처리하는 함수로 구성된 클래스.
	맴버들이 모두 static 맴버이므로, new 시키지 않아도 쓸 수 있다.
	
	아예 new 시키지 못하도록 해놓은 클래스여.
	
-------------------------------------------------------------------
Wrapper class
==> 주소를 사용하는 (class타입의 데이터를 사용하는) 곳에서
	Value Type(기본데이터타입)을 사용할수 없는 문제가 생길 수 있음.
	
	이런 문제를 해결하기 위해 만든 클래스를 Wrapper class라고 함!
	즉, 기본데이터 타입을 객체 형태로 활용하도록 만든 클래스임.
	
	+ java는 Object class를 중심으로 계층구초화 하여
	  클래스를 이용하도록 만든, 객체지향언어이다.
	  
	  하지만 Value type(기본데이터타입)만큼은 객체지향 원리를 따르지 않음.
	  따라서 다형성 구현에 있어 문제가 발생한다.
	  
	  ex.
	  	void abc(Object o){
	  	}
	  	==> 이 함수는 모든 데이터를 처리할 수 있는 기능으로 만들었음에도
	  		기본 데이터타입은 처리할 수 없다.
	  		
	 + Boxing과 UnBoxing
	 	Boxing		: Value type->Reference type
	 	UnBoxing	: Reference type->Value type
	 				or Heap영역에 있는 데이터를 다시 Stack으로 꺼냄.
	 				
	 Conclusion
	 	Wrapper class는 Boxing과 UnBoxing을 해주기 위한 클래스.
	 	
	 + java 1.4이후 부턴 Boxing&UnBoxing이 자동으로 처리가 됨!
	   ex.
	   	Integer no1=10;	==> Auto Boxing
	   	int num=no1;	==> Auto UnBoxing

-------------------------------------------------------------------
java.util 패키지 소속 유용한 클래스들~

	1. Objects
	==> 이 클래스는 100% static 함수로만 구성됨.
		객체 다룰 때 유용한 utility적인 함수로 구성된 클래스.
		ex.
			isNull(Object obj)
			==> 객체의 내용이 존재하는지를 확인하는 함수.
				(new 시킨 결과가 있는지! instance가 만들어져 있는지!)
				
			+ null 이란?
			  '참조형 변수에' 주소 변수에 주소가 없는 상태를 지칭.
			  찾아갈 대상이 없다는 말이며, 사용할 준비가 안됐다는 것.