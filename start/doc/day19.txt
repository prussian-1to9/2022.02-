# day19

네트워크
(내IP : 
		192.168.0.15)
		
용어
	1. IP주소
	==> 각각의 통신장비에 부여된 주소
		즉, 상대와 네트워크를 구성하기 위해 부여된
		고유의 장비 주소.
		
		상대와 네트워크 통신을 하려면 반드시 상대방의 IP가 필요함.
		통신장비엔 IP가 있어야 한다.
		
		~IP주소 확인~
		cmd->ipconfig
		
		+ IPv4, IPv6?
			IPv4	: 4자리 숫자로 구성된 IP주소.
			IPv6	: 6자리 숫자로 구성된 IP주소.
					==> 미래를 위해 준비한, 확장된 IP주소.
					
	2. Port 번호
	==> 각각의 프로그램에 부여되는 네트워크 번호
		즉, 같은 IP를 사용하는 컴퓨터에서
		실행되는 여러가지 프로그램을 구분하기 위한 번호.
		
		같은 네트워크 장비로 들어온 데이터의 소유자(프로그램)
		을 구분한다.
		
		포트번호	1~36xxx의 숫자 중에서 하나를 사용
		
		때문에 포트 번호가 중복되는 프로그램은
		같은 네트워크 장비 안에서 실행할 수 없다.
		
		결론적으로
			개인이 만드는 네트워크 프로그램은
			웬만하면 50000 이상의 번호를 사용하는것을 권고.
		
	3. Protocol
	==> 네트워크에서 상대방과 접속하는 방법이나
		데이터를 주고받는 방법 등 . .
		네트워크 구성을 원활하게 하기 위해 준비된 규약.
		--> 프로그램도, 하드웨어도 아닌, 규약집이다.
		
		1) HTTP		: 인터넷 통신을 위한 Protocol
		
***		2) TCP-IP	: 접속형 네트워크를 위한 Protocol
					  상대방과 접속된 상태에서 통신이 이루어짐.
					  장점 - 안정적
					  단점 - 통신회선의 손실율이 큼
					  
***		3) UDP		: 비접속형 네트워크를 위한 Protocol
					  상대방과 접속하지 않아도 통신이 이루어짐.
					  장점 - 통신회선의 손실율이 적음
					  단점 - 안정적이진 X
					  
-------------------------------------------------------------------
UDP 통신
==> 비접속형 네트워크
	즉, 상대방과 접속을 하지 않은 상태에서 일방적으로 데이터를 보낸다.
	
	용어 : 패킷
	==> 비접속형 방식이므로
		데이터와 상대방 주소를 묶은 상태.
		이 데이터가 누구에게 가는지를 데이터와 함께 묶어줘야 한다.
		UDP통신은 패킷을 이용해 데이터를 주고 받는다.
		

java에서 구현하는 방법 : 클래스
	
	DatagramSoket
	==> UDP통신을 위한 전화기에 해당하는 소켓
	
	생성방법
		1. DatagramSocket(int port)
		==> 네트워크에 흘러다니는 데이터를 받기위한 소켓

		2. DatagramSocket()
		==> 일방적으로, 상대방에게 데이터를 보내는.. 씨발
		
		
	주요 함수
	==> UDP통신은 내부적으로는 Stream을 이용하지만
		외부적으로는 Packet을 처리해야 하기 때문에
		Packet을 주고받는 명령(함수)가 존재함.
		
		send(DatagramPacket p)		: Packet(데이터)를 보내는 함수
		
		receive(DatagramPacket p)	: Packet을 받는 함수


DatagramPacket
==> UDP 통신에서 데이터를 주고받는 단위가 되는 Packet을 만들어 줌

	생성 방법
		1. DatagramPacket(byte[] buf, int length)
		==> 네트워크에 흘러다니는 Packet을 받기 위한 Packet
		
		2. DatagramPacket(byte[] buf, int length, InetAddress address, int port)
		==> 상대방에서 데이터를 보내기 위한 Packet
		
	주요 함수
	==> Packet은 데이터와 상대방 정보 + 자신의 정보
		를 묶어놓은 포장의 역할을 한다.
		
		그 안에 들어있는 상대방 정보를 알아내는 함수

		1. getAddress()	: 보낸 사람 주소 도출
		
		2. getData()	: 실제 데이터 도출
		
		3. getLength()	: 데이터 크기 도출
		
		4. getPort()	: 포트 번호 도출
			
-------------------------------------------------------------------
java에서의 TCP-IP프로그램 개발
1. TCP-IP는 두 개의 프로그램이 필요함! (Cilent / Server)

	Client	: 접속을 먼저 '요청'하는 프로그램
	Server	: 접속을 하면 받아주는 프로그램
	
	
	Sokcet
	==> 요청을 하는 통신기기

		생성방법
			Socket(String host, int port)
				host	: 상대방 IP
				port	: 포트번호
				
		특징
			Socket은 생성하는 순간 상대방과 접속된다.
			딱히 다른 조치 안해도 OK

		
	ServerSokcet
	==> 요청을 '받는' 통신기기

		생성방법
			ServerSocket(int port)
				port	: 포트번호
				
		주요 함수
			accept()	: 접속을 받아주는 함수
			
			1. Blcoking Method이다!
			   누군가가 접속을 해야만 실행된다.
			   접속자에게 통신할 Socket을 배정해주면 된다.
			   
			2. 이 메소드는 한번 실행하면 한 번만 접속을 허용한다.
			   여러번 접속을 원할 시, 여러번 실행되어야 한다.
			   고로 반복처리.

-------------------------------------------------------------------
채팅 프로그램

  +	여러가지 Event들
  
  	WindowListener							: 컨테이너의 상태에 조작을 할때 발생하는 이벤트 처리
  	
  	void windowOpened(WindowEvent e)		: 컨테이너가 처음 시작되는 순간 발생하는 이벤트
  	
  	void windowClsoed(WindowEvent e)		: 컨테이너가 화면에서 사라지는 순간 발생하는 이벤트
  	
  	void windowActivated(WindowEvent e)		: 컨테이너가 활성화 되는 순간 발생하는 이벤트
  	
  	void windowDeactivated(WindowEvent e)	: 컨테이너가 비활성화 되는 순간 발생하는 이벤트
  	
  	void windowDeiconified(WindowEvent e)	: 컨테이너가 icon 상태에서 원상복구 되는 순간 발생하는 이벤트

	void windowIconified(WindowEvent e)		: 컨테이너가 icon 상태로 되는 순간 발생하는 이벤트
	
	void windowClosing(WindowEvent e)		: x단추 누르는 순간 발생하는 이벤트

-------------------------------------------------------------------
TCP-IP 통신방법

	1. 요청과 응답이 1:1로 이루어지는 경우
	
		client->server 요청하면 server가 응답하도록 약속된 경우.
		이 경우, client는 server에게 요청한 후
		데이터 받을 준비를 하면 됨.
	
	2. 요청과 응답이 1:多로 이루어지는 경우
	
		client가 요청하지 않더라도 응답이 이루어지는 경우.
		이 경우, 받는 쪽 프로그램을 독립적으로 작성한다.
		==> 받는 쪽은 다른 작업과 독립되어, 병행처리 되어야 한다.
			(Thread로 생성)
			
	
	  +	예외 전위
		메소드의 실행을 중단하고, (메소드의 실행이 무의미할 때)
		그 함수를 사용한 곳에서 예외처리를 해라.

-------------------------------------------------------------------
try{
	ClientThread t=new ClientThread();
	t.start
}catch (Exception e){}

class ClientThread{
	/*	생성자 함수를 호출한 곳에서 예외처리를 함
		-> start (Runnable로의 전위) 불가!		*/
	ClientThread() throws Exception {}
	
	//	스스로 예외처리하면 start 가능!
	ClientThreaad() {
		try{}catch(Exception e){}
	}
}
	
-------------------------------------------------------------------
사용자 정의 프로토콜
==> protocol이란?	: 네트워크를 구성할 때 상호 약속된 규칙

	이 처럼 네트워크를 구성할 땐, 상호 약속이 매우 중요하다.
	그 중 개발자가 이 약속을 정해야 하는 경우가 존재한다.
	==> 서로 규칙을 갖고 통신을 행하기 위해!
	
	결론적으로
		주고받는 데이터의 의미를 좀 더 명확히 파악하기 위해
		정한 규칙이 사용자 정의 프로토콜이다.
		
-------------------------------------------------------------------
Client->Server

	


=============================================================
클라이언트 -> 서버

닉네임 보낸다			1101닉네임
방입장 허락			1201방이름
일반채팅				1301채팅내용
방퇴장 허락			1202방이름

참고	네트워크 상에서 클라이언트는 서버에게 주로 이벤트가 
		발생하면 데이터를 전송하는 방식으로 처리하면 된다.

서버 -> 클라이언트

닉네임잘받았다		2101Y|N
방입장 허락여부		2201Y|N
방퇴장 허락여부		2202Y|N
일반채팅				2301채팅내용

참고	서버입장에서는
		클라이언트가 데이터를 보내면 응답하는 방식으로
		처리하면 된다.


	
	public ClientThread() throws Exception{
		스트림만들고...
		나머지 처리한다.
	}

	//	위의 스레드 클래스를 사용하는 부분에서
	try {
		ClientThread	t = new ClientThread();
		t.start();
	}
	catch(Exception e) {
	}


=============================================================

DROP TABLE Member;
CREATE TABLE Member
(
	m_Name		VARCHAR2(50),
	m_ID			VARCHAR2(50),
	m_Pw			VARCHAR2(50)
);

INSERT INTO Member VALUES('전은석', 'euns', '12345');
INSERT INTO Member VALUES('제니', 'jennie', '12345');

클래스를 이용한 네트워크 통신
==>		IO에서 클래스 전체를 스트림으로 보낼 수 있다.
		이것을 직렬화다 라고 배웠다.

		네트워크 역시 스트림을 이용하는 방식이므로
		직렬화 기법을 이용해서 클래스 전체를 클라이언트와 서버사이에
		통신할 수 있다.

	참고
		이때 주의할 사항
		통신에 사용될 클래스는
		1.	반드시 서버와 클라이언트 모두 클래스를 가지고 있어야 한다.
		2.	같은 패키지 이름을 가지고 있어야한다.
		3.	클래스 이름도 반드시 동일해야 한다.
		4.	변수의 이름과 형태도 동일해야 한다.
		5.	순서도 동일해야 한다.
			결론	양쪽에 클래스가 반드시 동일한 클래스이어야 한다.

오늘 사용할 직렬화 클래스
package	NETData;
import		java.io.*;
public class MainData implements Serializable {
	public	int			protocol;
	public	ChatData	chatD;
	public	LoginData	loginD;
	public	FileData	fileD;
}

package	NETData;
import		java.io.*;
public class ChatData implements Serializable {
	public	String	msg;
}

package	NETData;
import		java.io.*;
public class LoginData implements Serializable {
	public	String	name;
	public	String	id;
	public	String	pw;
}

package	NETData;
import		java.io.*;
public class FileData implements Serializable {
	public	String	fileName;
	public	byte[] buff;
	public	Vector	list;
}

프로토콜 정의
클라이언트 -> 서버
	로그인 요청			1101
		==>		아이디하고 비번을 주면서....
	채팅					1201
		==>		대화내용을 주면서....
	파일업로드			1301
		==>		파일이름과 파일 내용을 주면서...
	파일목록 요청			1302
		==>		그냥
	파일다운로드			1303
		==>		다운로드할 파일 이름을 주면서....

서버 -> 클라이언트
	로그인 요청			2101
	채팅					2201
	파일업로드			2301
	파일목록 요청			2302
	파일다운로드			2303

####################################################################

		