# day02

자바를 활용하려면 필요하다.
컴파일러와 연계편집도구!=>JVM이라 칭함
	이 두 가지를 제공하는 도구를 다운받아 사용해야 한다.
	==> JDK가 바로 이 두가지 도구를 제공한다.
물론 이 안에는 2가지 기능 말고도 필요한 각종 도구들이 패키지로 묶여서
제공되고 있다.

--------------------------------------------------------------------------------------

자바를 만든 프로그램을 실행하는 원리(day01에 처음 했던 내용과 거의 일치)

1. 자바 언어의 문법에 맞게 자연어로 프로그램을 만든다.
	프로젝트 파일들은 저장되어야 하고, 몇가지 규칙을 따른다.
		- 저장할 파일의 이름은 class이름과 대소문자까지 동일
		- 확장자는 반드시 .java

		ex)
			class Test {
				...
			}
				==> 파일이름은 Test.java

2. 만들어진 소스파일은 컴파일 필수.
	그래야 컴퓨터가 이해할 수 있는 기계어가 만들어짐.
		/javac 파일이름.java
		* 이 때 옵션이 붙여딜 수도 있다.
		  이 컴파일 단계를 거치면 .class 확장자의 파일이 만들어지는데
		  이 파일은 byte code라고 한다.
		  
		  c.f. cmd창에서는 현재 폴더에 있는 도구만 사용 할 수 있는 것이 원칙.
		  	다른 폴더의 도구는 연결이 필요하다.
		  	->해당 도구의 위치를 시스템이 인식하고 있으면 된다. //환경변수
		  		이 경로를 "Path"에 등록해주면 됨 (이것도 변수로 인식)

3. 만들어진 class 파일은 배포가 되며, 타인이 실행하도록 줄 수도 있다.
	/java 클래스이름

* 자연어vs기계어
	자연어:인간이 읽을 수 있는 언어
	기계어:컴퓨터 CPU만 인식할 수 있는 언어
		- 저수준 언어/고수준 언어로의 구분 : 사람이 인식 할 수 있는 비율이 높을 수록 고수준



* APIvs라이브러리 (부분집합)
	API : OS와 프로그램 사이에서 원하는 작용을 위해 양 쪽을 연결해 주는 도구
	라이브러리 : API가 사용하는 도구에 필요한 정보를 기억한 프로그램의 일종

	JDK 설치 시
	자바로 만든 '프로그램'과 OS 사이를 원활히 작동시키기 위한 API, 라이브러리도 설치됨.
	
	라이브러리는
	ex. if(){
		}
		==>명령 실행을 위해서 절차가 필요하다. 이것을 기록해 놓은 문서가 '라이브러리'.
			결론적으로 API안에 라이브러리가 필연적으로 포함된다.
			
*진입점 함수란?
	함수는 자신이 스스로 실행되지 않는다.
	호출이 있어야 실행된다.
	
		함수이름([데이터]); 으로 호출 할 수 있다.
	
	JVM에 의해 실행되는 함수가 있어야 클래스가 실행이 된다.
	
		public static void main(String[] args)
		
	가 존재 해야 JVM이 자동호출을 실행할 수 있다.
	==> 이 처럼 어떤 프로그램이 시작되는 함수를 '진입점 함수'라고 한다.
		(예시일 뿐, 반드시 메인함수가 있어야 되는 것은 아니다.)

--------------------------------------------------------------------------------------

[Comment:주석]
	1. 단일행(한줄)주석
		//내용
	2. 다중행(여러줄)
		/*
			내용
	*/
	3. 배포문서에 포함되는 주석
		/**
		*	내용
		*/

--------------------------------------------------------------------------------------

Class의 구성요소, 맴버
	클래스 안에는 필요한 함수나 변수를 포함 시킬 수 있다.
	클래스 안에는 일반 명령은 절대 올 수 없다.

	이 때 클래스에 포함되는 함수, 변수를 맴버라고 부른다.
	맴버로 만들어진 변수를 Field라고 부른다.

	ex.
		public class Test {
			int num;
			float area;	//변수도 포함 가능
			
			public void xyz(){
			}
			
			public void abc(){
			}	//함수도 포함 가능

	JVM이 실행될 때, static 영역이 할당된다.
	속성이 static인 맴버이 static 맴버다.
	static 맴버의 특징
		1. static 영역에 실행되는 순간, 미리 올려지는 맴버
		2. 해당 맴버가 소속된 클래스를 new 시키지 않아도 해당 맴버는 사용 가능.
		3. static 영역에 올려지는 맴버는 같은 이름으로 여러개 올려질 수 없다.
			==> 변수의 경우 하나를 공유해서 사용하게 되는 결과가 생긴다.
		4. static 함수에서는 static 맴버만(+메모리에 올려진 정보들) 사용 할 수 있다.

--------------------------------------------------------------------------------------

[상수와 변수]

1. 상수
	개발자가 프로그램에게 알려주는 (정보)데이터
	상수는 한 번 정하면 수정 할 수 없기 때문에, 선언과 동시에 초기화 해야 한다.
	
		형식 : final 데이터타입 대문자상수명 = 데이터;
		
	ex.
		System.out.println("Hello");
		의 경우 "Hello"는 상수(리터럴)이다.
			
	+ 데이터는 literal pool이란 장소에 일단 저장한 후 사용되도록 되어 있다.
		
	ex.
		System.out.println("Hello"); 의 명령이 있다면
		
			1. literal pool에 "Hello"라는 데이터 자체가 기억된다.
				- 이 때 literal pool은 메모리 영역이고, 기억되는 데이터는 주소를 갖게 된다.
			2. literal pool에 기억된 데이터를 꺼내서 출력하게 된다.

	이 때 사용 할 수 있는 데이터들의 종류
		1. 정수형
			일반적인 소수점이 없는 숫자
				10	- 10진수
				010	- 8진수
				0x10 - 16진수
				
		2. 실수형
			소수점이 존재하는 숫자
			
				3.14	일반적인 소수 방식
				3.0e5	지수방식 (3.0*10^5)
				
		3. 논리형
			true, false (자바에선 0과 1의 값이 아니다!!!)
			==> '자바에선' 이 외의 논리형은 없다.
			
			boolean bool = true;	//숫자가 아닌 영어로 값을 기입
			
		4. 문자형 : ''사용
			'한 글자'로만 구성된 문자.
			==> 내부적으로는 입력한 문자를 유니코드로 변환해 기억하게 된다.
			
			ex. 'a'-> 97 (ascii 코드 값)
				'\u0000'(실제 유니코드 값) : 0000에 원하는 유니코드 값 기입.
		
		5. 문자열형 : ""사용(기본 데이터 타입은 X, Class 타입임.)
			두 글자 이상으로 구성된 문자.

2-0. 변수를 익히기 전에

	1. 변수의 필요성?
		개발자가 입력한 데이터는 일단 literal pool에 저장되고
		프로그램이 그 데이터를 꺼내 사용하게 된다.
		
		자바의 정보값은 메모리의 주소를 알아야 사용 할 수 있다.
		변수는 literal pool에 기억된 데이터의 주소를 기억해 놓는 역할을 한다.
		이 때, 변수 이름은 이것의 주소가 된다.
		
	2. Stack의 특징 (공간이 그렇게 크기 않음)
		1. 메모리에 별칭을 붙여 사용할 수 있는 영역.
			- 별칭 : 변수 이름
		2. 8개의 영역 중, literal pool 다음으로 가장 작은 영역을 OS에게서 배정받는다.
			-> Stack에 많은 양의 데이터를 보관하면 문제가 생길 수 있다.
			
	3. literal pool에 있는 데이터를 Stack에서 기억하는 법
		1. Stack에 필요한 메모리를 할당 받는다.
			형식 : 데이터타입 변수이름;
			
			==> 데이터 타입 기술의 의미
				- 데이터의 형태 to remember
				- 메모리의 크기 in need
				
			c.f. 데이터 타입에 의한 변수의 분류
				1. 기본형 변수
					자바에서 제공하는 기본 데이터 타입의 데이터를 기억할 변수
			
					*자바의 기본 데이터 타입
						논리형
							boolean : 1byte
						문자형
							char : 2byte
						정수형
							byte : 1byte
							short : byte
							int(java 기본형) : 4byte
							long : 8byte
						실수형
							float : 4byte
							double(java 기본형) : 8byte
				
				2. 참조형 변수 (Reference Type)
					기본형 데이터 외의 모든 데이터를 기억하는 변수(클래스를 기억하는 변수)

	
		2. 대입(기억) 연산자를 이용해 데이터를 기억한다.
			변수이름=데이터;
			ex.
				no = 10;

--------------------------------------------------------------------------------------
[Type Conversion:형변환]
	1. 리터럴 형변환
		별도의 표기를 하지 않으면 기본 입력타입으로 입력되는 형변환.
		뒤에 알파벳을 붙임으로써 데이터 타입을 지정해 줄 수 있다.
	
	2. 강제 형변환
	ex.
		float num1 = 10; -> 실수는 항상 정수보다 크기 때문에 OK
		float num2 = 10.; -> NG. 자동적으로 double형태로 입력되기 때문.
		
	3. 자동 형변환
		연산자를 쓸 때 서로 다른 byte값이 사용되면 큰 쪽으로 맞춰지는 형변환.

--------------------------------------------------------------------------------------

자바 프로그램의 토큰 구분
	컴파일러는 토큰단위로 번역을 시도.
	-> 개발자는 컴파일러가 번역하는 토큰을 구분해 주어야 함.
		토큰 : 하나의 명령이 종료되었음을 알려주는 기호
	
	우리가 습관적으로 붙였던 ;는
	토큰을 구분하기 위한 기호였습니다~
	
	토큰 구분을 하지 않으면 오류 날 수 있음.
	
	ex.
		int no1 = 10; int no2 = 20;
		==> 한 줄로 입력했으나 두 개의 명령으로 인식하기 때문에
			no1 처리 후 no2를 처리하게 됨.
	
	c.f.
		중괄호 }의 경우 그 자체가 토큰이기 때문에 ;가 필요하지 않다.


<질문해야징>
1. Class?
	1-1. 참조형 변수가 클래스로 구성될 수 있다는게 무슨 뜻인가요?
		변수는 클래스의 부분집합 개념인게 아닌가요? 
	1-2. 클래스의 정확한 개념이 뭔가요? '파일'의 개념이 아닌가요?
	1-3. 그렇다면 class 파일과 '클래스 타입'은 다른 개념인 것인가?
2. 리터럴 풀은, 정의하자면 '무엇'의 공간인가요? 변수 혹은 리터럴 상수?
3. final이라는 속성을 쓰지 않으면 변수선언이 되나요?
	(= 상수 선언에 있어 final 속성은 필수적인가요?)
4. 메세지창 떴던 파일은 무엇을 알려주시기 위해 보여주신건가요? 그리고 파일내용이... 뭔가요?

