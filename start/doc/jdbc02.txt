# jdbc02

SELECT 질의결과 사용하기

	JDBC에서 SELECT 질의명령을 보내면, 그 결과 (인라인 테이블)을
	ResultSet이라는 인터페이스가 관리한다.
	
	우리는 ResultSet을 이용해,
	인라인테이블의 (결과) 데이터를 선택해 사용할 수 있다.
	
	이 때 방법은, 현재 작업줄의 몇번째 칸의 데이터를 꺼내느냐
	가 된다! (SELECT 절에 나열한 필드 순서 그대로임)
	
	주요 함수
		1. 가상의 레코드 포인터(현재 작업 위치) 이동 명령
		
			-- 절대값 --
			absolute(int row)	: 지정한 row로 이동
			
			afterLast()			: EOF(End of File)로 이동
			
			beforeFirst()		: BOF(Begin Of File)로 이동
			
			first()				: 첫번째 row로 이동
			
			last()				: 데이터가 있는 마지막 row로 이동
			
			-- 상대값 --
			next()				: 다음 작업 row로 이동
			
			previous()			: 바로 전 작업 row로 이동
			
		  ※	afterLast, beforeLast는 항상 이동에 성공한다!
		  	==> BOF, EOF는 인라인 테이블이 생성될 때,
		  		java가 자동으로 가상의 위치를 만든다.
		  		
		  	이 외의 함수들은 이동에 실패할 수 있다.
		  	
	
		2. 데이터를 꺼내는 함수
		
			get___()		-- ___는 데이터타입
			==> 주의사항 : 실제 DB에서 사용하던 타입이 아닌,
							java에서 사용할 타입으로 꺼낸다.
				(DB에서의 타입과 달라도 무관)
				
			+ get___()을 이용한 여러 방법
				
				1) get___(위치값)
				※ java에서의 index는 0부터, jdbc index는 1부터!
				
				2) get___("별칭or필드이름")
				※ 별칭이 있을 경우 필드이름을 사용하면 안됨!
				
PreparedStatement
==> 질의명령을 DB에게 전달하는 Statement의 일종.

	Statement는 DB에게 매번 질의명령을 전달하는 형식이다.
	네트워크를 사용하는 DB에겐, 질의명령이 긴 경우 이런 방식이 불리하다.
	
	이 문제점을 해결할 수 있는것이 PreparedStatement다.
	얘는 미리 질의명령을 알려준 후, 실행이 필요할때만 요청하면 된다.
	매번 같은 질의명령을 실행할 필요가 있을 때 일반 Statement보다 유리하다.
	
	만드는 방법
		con.prepareStatement();		(con은 Connection 객체)
		
	  +	자주 사용하는 질의명령이라도, 데이터는 달라질 수 있다.
	  	이것을 해결하기 위해, 변화되는 데이터 부분은 ? 로 표기한다.
	  	이후,
	  		pstmt.set___(?의위치값, 데이터);	(___는 데이터 타입)
	  		
	  Statement는 속도는 느리지만, 매번 다른 질의명령을 실행할 수 있다!
	  PreparedStatement의 특징은 반대.
