# day13

예외처리
==> 프로그램상 문제는 없으나,
	데이터/장비의 문제 등에 의해 프로그램 실행 도중
	발생하는 애러를 '실행 에러(Run time Error)'라 하고,
	java에서는 '예외(Exception)"이라고 한다!
	
	문제는...
	이런 예외는 개발자가 예측해서 만들어야 되는거임,
	
	+ finally 블럭은 예외 발생 여부와 상관없이 실행되는 부분이지만
	  생략 가능!
	  
	  finally 붙은 경우 catch부분은 생략 가능! (흔하진 않음)
	  
java의 exception 처리 원리
	java에서 예외가 발생하면 JVM은 발생한 예외의 종류를 분석,
	예외에 대한 정보를 클래스(객체)로 만들고
	catch 부분에 그 클래스의 주소를 전달한다.
	
다중 catch 블럭
==> try안에 예외 발생 요소가 여러가지 복합적인 요소일 때 사용.

	try {} catch(){} catch(){}
	
	if else if때 처럼, 범위가 좁은 조건 순서로 적는 것이 좋다.
	
-------------------------------------------------------------------
예외정보 출력하기
==> 예외의 정보를 얻는 법!

	1. 예외 정보 클래스 변수를 출력
		ex.
			System.out.println(예외정보클래스변수);
		==> 예외의 원인 파악 가능!
	
	2. 예외클래스변수.printStackTrace
		==> 예외의 정보 + 예외가 발생하게 된 위치, 경로 출력
		
	예외 처리의 목적 : 프로그램의 정상적인 종료.
	
	앞서, 예외처리는 예외가 발생했을 시 개발자가 그것을 수정하여
	정상적으로 동작하도록 만드는 행위이다.
	하지만 이것은 꽤 어려우며, 성공 빈도가 낮다.
	
	따라서 실제 예외처리의 이유는
	예외의 정보를 사용자에게 알려, 프로그램의 문제점이 생긴 이유를 알게하고
	그 프로그램을 정상적으로 종료되도록 하는 것에 목적이 있다.

-------------------------------------------------------------------
예외 전이하기 ~※Overriding 규칙
==> 함수는 프로그램의 가장 작은 단위로, 한 가지 작업을 하기 위해 만듦.
	따라서 함수 안에서 작업을 하다가 예외가 발생하면
	그 함수는 더 이상 실행할 필요가 없는 경우가 많다.
	
	해서, 함수는 예외를 전이하도록 해 놓은 경우가 있다.
		
		접근지정자 [속성] 반환값타입 함수이름(매개변수 리스트)
			throws 예외클래스1, 예외클래스2, ... {
		}
		
	의미 : 지정한(나열한) 예외가 발생하면, 이 함수를 실행해도
			의미가 없으므로, 실행을 중지시키시오.
			
	*****
	예외가 전이된 함수는
	반!드!시! 그 함수를 호출한 곳에서 예외처리를 해 줘야 한다.
	
	+ 어떤 함수가 예외를 전이하는 함수라도, 예외처리가 불필요한 함수가 있음.
		
		전이하는 예외가 RuntimeException의 하위인 경우엔
		예외처리가 선택적이다. (안해도 된다!)
		주로 java.lang package에 있는 함수들중에 이런 함수가 많음.
		
		그래도 웬만하면 하는 편이 좋음!
		
-------------------------------------------------------------------
강제 예외 던지기~!
==> JVM은 예외로 인정하지 않지만

	ex. 나이는 음수가 될 수 없다.
		이런 경우, (목적상) 예외가 되어야 함.
		
	형식
		throw new 예외클래스이름();
		
	주의주의!!!
		예외 전이	: throws 예외클래스
		예외 던지기	: throw new 예외클래스();
		
사용자 지정 예외 클래스 만들기
==> 예외클래스는 예외의 발생 원인을 알려준다.
	그런데!! 예외 던지기는 java가 준비한 예외는 아님.
	So 예외의 원인 파익이 상대적으로 어렵다.
	
	방법
		1. Exception 클래스를 상속받은 클래스를 만든다.
		2. toString()을 오버라이딩 해,
			예외의 원인을 출력할 수 있도록 한다.
		