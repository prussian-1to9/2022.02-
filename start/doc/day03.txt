#day 03

컴퓨터가 숫자를 기록하는 방법~
	
	양수
		2진수로 변환하고 부호비트는 무조건 0을 붙임
		
	음수
		1. 양수로 가정하고 2진수로 변환한다.
		2. 보수화시킨다. (0↔1)
		3. +1 후, 부호비트를 1로 지정해준다.
		
--------------------------------------------------------------------------------------

연산자
	데이터를 가공하기 위해 사용되는 기호
	
	- 용어
		연산자 : 가공방식을 나타내는 기호
		피연산자 : 가공에 사용되는 데이터
				
	[operator convert]
		연산자를 사용하면 가공된 결과가 나오는데
		이 결과는 항상 큰 형태로 나오는 것을 원칙으로 한다.
		ex.
			1+3.14==>4.14
			(int)+(double)=(double)
			
		+ 기본 데이터타입+string==>string
		
		※ 수학과 달리, 프로그래밍에서의 연산은
		절대 3개 이상의 피연산자를 갖지 못한다.
		
		
		
	- 규칙
		1. [operator convert]
			연산자를 사용하면 가공된 결과가 나오는데
			이 결과는 항상 큰 형태로 나오는 것을 원칙으로 한다.
			ex.
				1+3.14==>4.14
				(int)+(double)=(double)
			
			+ 기본 데이터타입+string==>string
			※ 수학과 달리, 프로그래밍에서의 연산은
				절대 3개 이상의 피연산자를 갖지 못한다.
		
		2. 모든 연산자는 ->의 방향으로 계산된다.
			※ 대입 연산자는 <-
			
		3. 모든 연산자는 중앙처리장치에서 처리되는게 원칙.
			※ 증감연산자, 시프트연산자는 이 과정 없이
				메모리 상에서 연산 처리 된다.
	
	- 종류
		1. 사칙 연산자
			말그대로 +-*/과, %
			사칙 연산자는 항상 2개의 피연산자를 갖는다.
			
			c.f. +는 문자열 연산에서도 사용될 수 있다.
				이 때, 결합된 문자열이 결과값으로 도출된다.
		
		2. 대입 연산자
			변수에 데이터를 기억하도록 하는 연산자
				변수=데이터;	//위치가 바뀔 수 없다.
			사칙 연산자와 혼용할 수 있다.
				+=, -=, *=, /=, %=
						
		3. 증감 연산자 : 변수 앞 뒤로 붙을 수 있다.
			-[FluctuationOperator]
			++ : 1 증가
			-- : 1 감소
			
		4. 부호반전 연산자
			-(데이터);
			
		5. 비교 연산자(3항 이상은 불가)
			대소관계를 비교한다.
				==,!=,<,>
				>=, <= : =이 앞에 올 수 없다.
			논리 값으로 도출되기 때문에
			if, for, while 등 제어명령에서 많이 사용된다.
			
			c.f. 문자열의 비교일 경우
				equals()를 사용해야 데이터의 '주소'가 아닌
				데이터의 '값'의 비교값이 나온다.
		
		- day 4에서 후술합니다.
		
		
		




